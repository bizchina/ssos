<?php 

class PhoneRecognition
{   
    protected $path;

    protected $imgSize;

    protected $imgDataY;

    protected $imgDataX;

    protected $magHorData;

    protected $magVerData;

    protected $splitData;

    public function __construct($path)
    {
        $this->path = $path;
    }

    public function getHexColor()
    {   
        //图像宽度的像素值，高度像素值，图片类型，文本属性
        list($width, $height, $type, $attr) = getimagesize($this->path);

        $img = ImageCreateFromPng($this->path);
        for ($x=0; $x < $width; $x++) { 
            for ($y=0; $y < $height; $y++) { 
                $colorIndex = imagecolorat($img, $x, $y);
                $rgb = imagecolorsforindex($img, $colorIndex);

                if ($rgb['red'] < 125 || $rgb['green'] < 125 ||
                    $rgb['blue'] < 125) {
                    $this->imgDataY[$x][$y] = 1;
                    $this->imgDataX[$y][$x] = 1;
                } else {
                    $this->imgDataY[$x][$y] = 0;
                    $this->imgDataX[$y][$x] = 0;
                }
            }
        }

        $this->imgSize['width'] = $width;
        $this->imgSize['height'] = $height;
    }

    public function magHorData()
    {
        $z = 0;
        for ($y = 0; $y < $this->imgSize['height']; $y++) {
            if (in_array('1', $this->imgDataX[$y])) {
                $z++;
                $count = 0;
                for ($x = 0; $x < $this->imgSize['width']; $x++) {
                    if ($this->imgDataX[$y][$x] == '1') {
                      $this->magHorData[$z][$x] = 1;
                    } else {
                      $this->magHorData[$z][$x] = 0;
                      $count++;
                    }
                }

                $this->magHorData[$z] = array_values($this->magHorData[$z]);

                //过滤掉一些空白线条
                if ($count / $this->imgSize['width'] > 0.90) {
                    unset($this->magHorData[$z]);
                }

                if ($count / $this->imgSize['width'] < 0.1) {
                    unset($this->magHorData[$z]);
                }   
            }
        }

        $this->magHorData = array_values($this->magHorData);
    }

    //$start = 20, $limit = 18 字符串切割规则，有可能需要调整
    public function magVerData($first = 20, $limit = 18)
    {   
        if (!$this->magHorData) return;

        $count = count(current($this->magHorData));
        $start = 0;
        $split = [];
        for ($x = 0; $x < $count; $x++) {
            $zeroCount = 0;
            for ($i=(count($this->magHorData) - 1); $i >= 0; $i--) { 
                $this->magVerData[$x][] = $this->magHorData[$i][$x];

                if ($this->magHorData[$i][$x] == 0) {
                    $zeroCount++;
                }
            }

            if ($zeroCount / count($this->magHorData) > 0.95) {
                if ($x - $start < 5) {
                    continue;
                }

                for ($e=(count($this->magHorData) - 1); $e >= 0; $e--) { 
                    unset($this->magHorData[$e][$x]);
                }
            } else {
                $start = $x;
            }
        }

        //切割每个数字
        $count = count(current($this->magHorData));
        foreach ($this->magHorData as &$d) {
            $d = array_values($d);
        }

        $split = [];
        for ($x = $first; $x < $count; $x = $x + $limit) {
            for ($i=(count($this->magHorData) - 1); $i >= 0; $i--) {
                for ($j=$x - $first; $j < $x; $j++) {
                    $splitData[$i][] = $this->magHorData[$i][$j];
                }
            }

            ksort($splitData);
            $split[] = $splitData;
            unset($splitData);

            if (($x + $limit) >= $count) {
                $x = $x + $limit;
                for ($i=(count($this->magHorData) - 1); $i >= 0; $i--) {
                    for ($j=$x - $first; $j < $count; $j++) {
                        $splitData[$i][] = $this->magHorData[$i][$j];
                    }
                }

                ksort($splitData);
                $split[] = $splitData;
                unset($splitData);
            }
        }

        $this->splitData = $split;
    }

    public function draw($data)
    {  
        if (is_array($data)) {
            $c="";
            foreach ($data as $key => $val) {
                foreach ($val as $k => $v) {
                    if ($v == 0) {
                      $c .= "<font color='#FFFFFF'>" . $v . "</font>";
                    } else {
                      $c .= $v;
                    }
                }
                $c .= "<br/>";
            }
        }
        echo $c;
    }

    public function getNum()
    {   
        $num = "";

        $this->getHexColor();
        $this->magHorData();

        //开始尝试识别,调整参数
        $this->magVerData();
        foreach ($this->splitData as &$o) {
            foreach ($o as &$v) {
                $v = implode("", $v);
            }
            $o = implode("", $o);
            $o = $this->guess($o, 90);
        }

        return implode("", $this->splitData);
    }

    private function guess($numStr, $accuracy = 80)
    {   
        $result = "*";

        foreach ($this->dictData() as $key => $val) {
            if (is_array($val)) {
                foreach ($val as $o) {
                    similar_text($numStr, $o, $pre);
                    if ($pre > $accuracy) {
                      $result = $key;
                      break;
                    }
                }
            } else {
                similar_text($numStr, $val, $pre);
                if ($pre > $accuracy) {
                  $result = $key;
                  break;
                }
            }
        }

        return $result;
    }

    public function dictData()
    {
        return [
            '9' => [
                '0000000001111111000000000001111111111100000000011110001111100000001111000000111000000011100000000111000001111000000001110000011100000000011100000111000000000111000001110000000001110000011110000000011100000011100000001111000000111100000111110000000111111111111100000000111111110111000000000111111001110000000000000000011100000000000000000111000000111000000001110000001110000000111000000011110000011110000000011110011111000000000111111111100000000000011111110000',
                '000000000111111100000000000111111111110000000001111000111110000000111100000011100000001110000000011100000111100000000111000001110000000001110000011100000000011100000111000000000111000001111000000001110000001110000000111100000011110000011111000000011111111111110000000011111111011100000000011111100111000000111000000001110000001110000000111000000011110000011110000000011110011111000000000111111111100000000000011111110000',
            ],
            '8' => [
                '1100000000111111100011000000111111111110110000001111000111101100000111100000111111000001110000000111110000011100000001111100000111000000011111000001111000000111110000001111000011111100000001111111111011000000011111111100110000001111111111101100000111100000111111000011110000000111110000111000000000111100001110000000001111000011100000000011110000111000000000111100001111000000001111000001111000000111110000011111000111111100000011111111111011000000001111111000',
                '0000000001111111100000000000111111111100000000011110001111100000001111000000111000000011100000001110000000111000000011110000001110000000111000000011110000001110000000011110000111100000000011111111110000000000111111111000000000011111111111100000001111000001111100000011100000000111000001111000000001110000011100000000011100000111000000000111000001111000000001110000001110000000011100000011110000001111000000011111001111100000000011111111110000000000011111111000',
            ],
            '7' => [
                '0000001111111111111110000011111111111111100000111111111111111100000000000000111111000000000000001110110000000000000111101100000000000011110011000000000000111000110000000000011110001000000000000111000000000000000011110000100000000000111000001100000000011110000011100000000111000000111000000001110000001110000000111100000011100000001110000000111000000011100000001110000000111000000011100000001110000000110000000111000000001000000001110000000000000000011100000000'
            ],
            '6' => [
                '1110000000111111110011100000011111111110111000001111000111111100000111100000011110000001110000000111100000111100000000110000001110000000000000000011100000000000000000111001111110000000001111111111111000000011111110111111000000111110000011110000001111000000011100000011100000000011000000111000000000110000001110000000001100000011100000000011000000111000000000110000000111000000011100000001111000001111000000001111100111100000000001111111111000000000001111111000',
                '000000000011111110000000000011111111110000000001111100011110000000011100000011110000001111000000011100000011100000000111000001110011111110000000011101111111110000000111111100111110000001111100000011110000011110000000011100000111100000000111000001111000000001110000011110000000011100000111100000000111000000111000000001110000001111000000011100000001110000001110000000011111001111100000000011111111110000000000001111111000',
            ],
            '1' => [
                '0000000000000111000000000000000001110000100000000000111100001100000000111111000011000000011111110000110000011111111100001100000111100111000011000001100001110000100000000000011100000000000000000111000000000000000001110000100000000000011100001100000000000111000011000000000001110000111000000000011100001110000000000111000011100000000001110000111000000000011100001100000000000111000011000000000001110000100000000000011100000000000000000111000000000000000001110000'
            ],
            '2' => [
                '0000011111111000000000001111111111100000000111110001111100000001110000000111000000111100000001110000001110000000001110000001100000000011100000000000000001110000000000000000011100000000000000001111000000000000000111100001000000000011111000010000000001111100000100000000111110000001000000011110000000000000001111000000000000000111100000000000000011110000000000000001111000000000000000111100000000000000001111111111111110000011111111111111100000111111111111111000'
            ],
            '0' => [
                '0000011111111000000000001111111111000000000111100011111000000001110000011110000000111000000011100000001110000000011100000011100000000111000000110000000001110000011100000000011100000111000000000111000001110000000001110000001110000000011100000111000000000111000001110000000001110000011100000000011100000011000000000111000000111000000001110000001110000000011100000011110000001110000000011100000111100000000111110011110000000000111111111100000000000011111100000000',
                '0000000001111111100000000000111111111100000000011110001111100000000111000001111000000011100000001110000000111000000001110000001110000000011100000011000000000111000001110000000001110000011100000000011100000111000000000111000000111000000001110000011100000000011100000111000000000111000001110000000001110000001100000000011100000011100000000111000000111000000001110000001111000000111000000001110000011110000000011111001111000000000011111111110000000000001111110000',
            ],
            '5' => [
                '011111111111000000011111111111000000011111111111000000111000000000000000111000000000000000111000000000000000111000000000000000110001110000000000111111111100000000111111111111000000111100001111000000110000000111100000000000000011100000000000000011100000000000000011110000000000000011110000100000000011100000110000000011100000110000000011100000111000000111100000111110011111000000011111111110000000001111111000000000',
                '0111111111111000011101111111111110000111011111111111100001110111000000000000000001110000000000000000111000000000000000001110000000000000000011100011000000000000111111111110000000001111111111110000000011110000111110000000111000000111100000000000000000111100000000000000000111000000000000000001110000000000000000011100000011000000000111000000110000000001110000001110000000111000000011100000011110000000111110011111000000000111111111100000000000011111110000000000'
            ],
            '3' => [
                '0001111111000000000101111111111000000001111110001111000000011110000001111000000111100000001110000001111000000011100000110000000000111000001100000000011110000011000000001111000000110000011111100000001100000111111000000011000001111111100001110000000001111000000000000000001111000000000000000001110000000000000000011100000011000000000111000011110000000001110001111110000000111100011111110000011110000111111110001111100000110111111111110000000100011111110000000000',
                '000000000111111100000000000111111111110000000001111000111100000000111100000111100000001110000000111000000011100000001110000000000001111111000000000000011111100000000000000111111110000001111000000001110000001110000000011100000011110000001111000000011111001111100000000011111111110000000000011111110000'
            ],
            '4' => [
                '0000000000001110000000000000000111100000000000000001111000000000000000111110000000000000011111100000000000001111111000000000000011101110000000000001110011100000000000111000111000000000001110001110000000000111000011100000000011100000111000000001111000001110000000011100000011100000001111000000111000000011111111111111110000111111111111111100000000000000111000000000000000001110000000000000000011100000000000000000111000000000000000001110000000000000000011100000'
            ]
        ];
    }
}

// for ($i=0; $i < 10; $i++) { 
//     $phone = new PhoneRecognition("n{$i}.png");
//     $num = $phone->getNum();
//     echo "$num".PHP_EOL;
// }

$phone = new PhoneRecognition("5.png");
$num = $phone->getNum();
echo $num.PHP_EOL;

$phone = new PhoneRecognition("2.png");
$num = $phone->getNum();
echo $num.PHP_EOL;

$phone = new PhoneRecognition("3.png");
$num = $phone->getNum();
echo $num.PHP_EOL;

$phone = new PhoneRecognition("4.png");
$num = $phone->getNum();
echo $num.PHP_EOL;